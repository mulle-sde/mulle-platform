#! /usr/bin/env mulle-bash
# shellcheck shell=bash
#
#   Copyright (c) 2018 nat - <|ORGANIZATION|>
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of <|ORGANIZATION|> nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
[ "${TRACE}" = 'YES' -o "${MULLE_PLATFORM_TRACE}" = 'YES' ] && set -x && : "$0" "$@"

MULLE_EXECUTABLE_VERSION="1.1.0"


#
# Determine location of own libexec directory. Which is `src` in development
# and ../libexec when deployed. MULLE_EXECUTABLE needs to be defined for this.
#

if [ -z "${MULLE_PLATFORM_LIBEXEC_DIR}" ]
then
   r_get_libexec_dir "${MULLE_EXECUTABLE}" "mulle-platform" "mulle-platform-flags.sh"
   MULLE_PLATFORM_LIBEXEC_DIR="${RVAL}"
fi


platform::print_commands()
{
   SHOWN_COMMANDS="\
   environment   : output a list platform specific information in env style
   search        : search for an OS library
   includepath   : print path for OS headers
   searchpath    : print searchpath for OS libraries
   translate     : translate link commands
   wholearchive  : produce linker command for whole archive linking"

   HIDDEN_COMMANDS="\
   sdkpath       : print SDK path
   libexec-dir   : print path to mulle-platform libexec
   uname         : mulle-platforms simplified uname(1)
   version       : print mulle-platform version"


   printf "%s\n" "${SHOWN_COMMANDS}"

   if [ "${MULLE_FLAG_LOG_VERBOSE}" != 'NO' ]
   then
      printf "%s\n" "${HIDDEN_COMMANDS}"
   fi
}


platform::print_flags()
{
   echo "   -f            : force operation"

   options_technical_flags_usage "         : "
}


platform::usage()
{
   [ $# -ne 0 ] && log_error "$*"

   cat <<EOF >&2
Usage:
   ${MULLE_USAGE_NAME} [flags] <command> [options]

Flags:
EOF
   platform::print_flags | LC_ALL=C sort >&2


   cat <<EOF >&2

Commands:
EOF

   platform::print_commands | LC_ALL=C sort >&2


   cat <<EOF >&2

      (Options are command specific. Use ${MULLE_USAGE_NAME} <command> -h for help.)
EOF

   if [ "${MULLE_FLAG_LOG_VERBOSE}" = 'NO' ]
   then
      cat <<EOF
      (use ${MULLE_USAGE_NAME} -v help to show more commands)

EOF
   fi

   exit 1
}


platform::main()
{
   local MULLE_FLAG_MAGNUM_FORCE='NO'

   # technical flags
   local MULLE_TRACE
   local MULLE_FLAG_EXEKUTOR_DRY_RUN='NO'
   local MULLE_FLAG_LOG_LOCAL='NO'
   local MULLE_FLAG_LOG_DEBUG='NO'
   local MULLE_FLAG_LOG_EXEKUTOR='NO'
   local MULLE_FLAG_LOG_FLUFF='NO'
   local MULLE_FLAG_LOG_SCRIPTS='NO'
   local MULLE_FLAG_LOG_SETTINGS='NO'
   local MULLE_FLAG_LOG_VERBOSE='NO'
   local MULLE_FLAG_LOG_MERGE='NO'
   local MULLE_TRACE_POSTPONE='NO'

   #
   # simple option handling
   #
   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -f|--force)
            MULLE_FLAG_MAGNUM_FORCE='YES'
         ;;

         -h*|--help|help)
            platform::usage
         ;;

         --version)
            printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
            exit 0
         ;;

         -*)
            platform::usage "Unknown option \"$1\""
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}" && set -x

   local cmd="$1"
   [ $# -eq 0 ] || shift

   case "${cmd}" in
      'env'|'environment')
         # shellcheck source=src/mulle-platform-environment.sh
         . "${MULLE_PLATFORM_LIBEXEC_DIR}/mulle-platform-environment.sh"

         platform::environment::main "$@"
      ;;

      'includepath')
         # if you rename this command, search for '***' and rename as well
         # shellcheck source=src/mulle-platform-includepath.sh
         . "${MULLE_PLATFORM_LIBEXEC_DIR}/mulle-platform-includepath.sh"

         platform::includepath::main "$@"
      ;;

      'sdkpath')
         # shellcheck source=src/mulle-platform-sdkpath.sh
         . "${MULLE_PLATFORM_LIBEXEC_DIR}/mulle-platform-sdkpath.sh"

         platform::sdkpath::main "$@"
      ;;

      'search')
         # if you rename this command, search for '***' and rename as well
         # shellcheck source=src/mulle-platform-search.sh
         . "${MULLE_PLATFORM_LIBEXEC_DIR}/mulle-platform-search.sh"

         platform::search::main "$@"
      ;;

      'searchpath')
         # if you rename this command, search for '***' and rename as well
         # shellcheck source=src/mulle-platform-searchpath.sh
         . "${MULLE_PLATFORM_LIBEXEC_DIR}/mulle-platform-searchpath.sh"

         platform::searchpath::main "$@"
      ;;

      'translate')
         # shellcheck source=src/mulle-platform-translate.sh
         . "${MULLE_PLATFORM_LIBEXEC_DIR}/mulle-platform-translate.sh"

         platform::translate::main "$@"
      ;;

      'wholearchive')
         # shellcheck source=src/mulle-platform-translate.sh
         . "${MULLE_PLATFORM_LIBEXEC_DIR}/mulle-platform-translate.sh"

         platform::translate::r_default_wholearchive_format "$@"
         [ ! -z "${RVAL}" ] && printf "%s\n" "${RVAL}"
      ;;

      'libexec-dir')
         printf "%s\n" "${MULLE_PLATFORM_LIBEXEC_DIR}"
      ;;

      'uname')
         printf "%s\n" "${MULLE_UNAME}"
      ;;


      'version')
         printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
      ;;

      "")
         platform::usage
      ;;

      *)
         platform::usage "Unknown command \"${cmd}\""
      ;;
   esac
}


call_with_flags "platform::main" "${MULLE_PLATFORM_FLAGS}" "$@"
