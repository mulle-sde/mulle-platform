#! /usr/bin/env bash
#
#   Copyright (c) 2018 nat - <|ORGANIZATION|>
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of <|ORGANIZATION|> nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
[ "${TRACE}" = 'YES' -o "${MULLE_PLATFORM_TRACE}" = 'YES' ] && set -x && : "$0" "$@"


MULLE_EXECUTABLE_VERSION="0.2.0"


trap_fail()
{
   exit 1
}


print_commands()
{
   SHOWN_COMMANDS="\
   command     : does nothing interesting so far
"

   HIDDEN_COMMANDS="\
   libexec-dir : print path to mulle-platform libexec
   uname       : mulle-platforms simplified uname(1)
   version     : print mulle-platform version"


   printf "%s\n" "${SHOWN_COMMANDS}"

   if [ "${MULLE_FLAG_LOG_VERBOSE}" != 'NO' ]
   then
      printf "%s\n" "${HIDDEN_COMMANDS}"
   fi
}


print_flags()
{
   echo "   -f          : force operation"

   options_technical_flags_usage "       : "
}


usage()
{
   [ $# -ne 0 ] && log_error "$*"

   cat <<EOF >&2
Usage:
   ${MULLE_USAGE_NAME} [flags] <command> [options]

Flags:
EOF
   print_flags | LC_ALL=C sort >&2


   cat <<EOF >&2

Commands:
EOF

   print_commands | LC_ALL=C sort >&2


   cat <<EOF >&2

      (Options are command specific. Use ${MULLE_USAGE_NAME} <command> -h for help.)
EOF

   if [ "${MULLE_FLAG_LOG_VERBOSE}" = 'NO' ]
   then
      cat <<EOF
      (use ${MULLE_USAGE_NAME} -v help to show more commands)

EOF
   fi

   exit 1
}


main()
{
   local MULLE_FLAG_MAGNUM_FORCE='NO'

   # technical flags
   local MULLE_TRACE
   local MULLE_FLAG_EXEKUTOR_DRY_RUN='NO'
   local MULLE_FLAG_LOG_LOCAL='NO'
   local MULLE_FLAG_LOG_DEBUG='NO'
   local MULLE_FLAG_LOG_EXEKUTOR='NO'
   local MULLE_FLAG_LOG_FLUFF='NO'
   local MULLE_FLAG_LOG_SCRIPTS='NO'
   local MULLE_FLAG_LOG_SETTINGS='NO'
   local MULLE_FLAG_LOG_VERBOSE='NO'
   local MULLE_FLAG_LOG_MERGE='NO'
   local MULLE_TRACE_POSTPONE='NO'

   #
   # simple option handling
   #
   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -f|--force)
            MULLE_FLAG_MAGNUM_FORCE='YES'
         ;;

         -h*|--help|help)
            usage
         ;;

         --version)
            printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
            exit 0
         ;;

         -*)
            usage "Unknown option \"$1\""
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}"

   local cmd="$1"
   [ $# -eq 0 ] || shift

   case "${cmd}" in
      'search')
         # if you rename this command, search for '***' and rename as well
         # shellcheck source=src/mulle-platform-search.sh
         . "${MULLE_PLATFORM_LIBEXEC_DIR}/mulle-platform-search.sh"

         platform_search_main "$@"
      ;;

      'translate')
         # shellcheck source=src/mulle-platform-translate.sh
         . "${MULLE_PLATFORM_LIBEXEC_DIR}/mulle-platform-translate.sh"

         platform_translate_main "$@"
      ;;

      'wholearchive')
         # shellcheck source=src/mulle-platform-translate.sh
         . "${MULLE_PLATFORM_LIBEXEC_DIR}/mulle-platform-translate.sh"

         platform_default_wholearchive_format "$@"
      ;;

      'libexec-dir')
         printf "%s\n" "${MULLE_PLATFORM_LIBEXEC_DIR}"
      ;;

      'uname')
         printf "%s\n" "${MULLE_UNAME}"
      ;;

      'version')
         printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
      ;;

      "")
         usage
      ;;

      *)
         usage "Unknown command \"${cmd}\""
      ;;
   esac
}


########
###
### INIT
###
_init()
{
   #
   # minimal setup exit
   #
   if [ "$1" = "version" ]
   then
      printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
      exit 0
   fi

   if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
   then
      MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions-env libexec-dir 2> /dev/null`"
      if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
      then
         if [ -z "`command -v 'mulle-bashfunctions-env'`" ]
         then
            echo "Fatal Error: Could not find mulle-bashfunctions-env in PATH ($PATH) - mulle-bashfunctions not installed ?" >&2
         else
            echo "Fatal Error: Could not find libexec-dir of mulle-bashfunctions-env ($PWD)" >&2
         fi
         exit 1
      fi
   fi

      # shellcheck source=../mulle-bashfunctions/src/mulle-string.sh
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" "minimal" &&
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-path.sh" &&
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-file.sh" ||
      fail "failed to load bashfunctions from ${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}"

   local _libexec_dir

   ### *** ###
   _get_libexec_dir "$0" "mulle-platform" "mulle-platform-search.sh"

   #
   # minimal setup exit
   #
   case "$1" in
      "libexec-dir")
         printf "%s\n" "${_libexec_dir}"
         exit 0
      ;;
   esac

   MULLE_PLATFORM_LIBEXEC_DIR="${_libexec_dir}"

   #  set -e # more pain then gain in the end
   #  set -u # doesn't work with my style

   trap trap_fail INT
   set -o pipefail
}
###
### INIT
###
########


_init "$@" # needs params
main "$@"
